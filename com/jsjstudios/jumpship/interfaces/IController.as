//////////////////////////////////////////////////////////////////////////////////// JumpShip Framework for AS3// Copyright 2008 Jamie Scanlon//// Permission is hereby granted, free of charge, to any person obtaining a copy // of this software and associated documentation files (the "Software"), to deal // in the Software without restriction, including without limitation the rights // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell // copies of the Software, and to permit persons to whom the Software is // furnished to do so, subject to the following conditions://// The above copyright notice and this permission notice shall be included in all // copies or substantial portions of the Software.//// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS // IN THE SOFTWARE.//// Project: JumpShip Framework - Interfaces// File: IController.as// Created by: Jamie Scanlon//////////////////////////////////////////////////////////////////////////////////package com.jsjstudios.jumpship.interfaces{	////////////////////////////////////////////////////////////////////////////////	// Imports	////////////////////////////////////////////////////////////////////////////////		//		////////////////////////////////////////////////////////////////////////////////	//	//	// Interface: IController	//	//	////////////////////////////////////////////////////////////////////////////////		/**	 * <code>IController</code> Interface. 	 * <p>	 * In the JumpShip framework, <code>ICommand</code> assumes the following responsibilities:	 * <UL>	 * <LI> Remembering which <code>ICommand</code>s are called for a given notification 	 * (an Event or otherwise). A notification is a <code>String</code> associated with a <code>ICommand</code>	 * <LI> Creating a new instance of the proper <code>ICommand</code>	 * to handle a given notification.</LI>	 * </UL>	 */	public interface IController	{				/**		 * Register a particular <code>ICommand</code> with a notifier.		 * 		 * @param notification a <code>String</code> parameter		 * @param commandRef the Class of the <code>ICommand</code>		 */		function addCommand ( notification:String, commandRef:Class):void				/**		 * Create and execute the <code>ICommand</code> previously registered with the given notification name.		 * 		 * @param notification <code>String</code> parameter previously associated wit a <code>ICommand</code>.		 * @param params an optional <code>Object</code> containing parameters to be passed to the <code>ICommand</code>.		 * @param returnFunc an optional <code>Function</code> parameter that will be called to handle the result of the <code>ICommand</code>.		 */		function createCommand( notification:String, params:Object = null, returnFunc:Function = null ):void				/**		 * Remove a previously registered <code>ICommand</code>.		 * 		 * @param notification the name of the <code>ICommand</code> mapping to remove.		 */		function removeCommand( notification:String ):void			} // Class End	} // Package End