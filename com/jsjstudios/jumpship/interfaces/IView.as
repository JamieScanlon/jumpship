//////////////////////////////////////////////////////////////////////////////////// JumpShip Framework for AS3// Copyright 2008 Jamie Scanlon//// Permission is hereby granted, free of charge, to any person obtaining a copy // of this software and associated documentation files (the "Software"), to deal // in the Software without restriction, including without limitation the rights // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell // copies of the Software, and to permit persons to whom the Software is // furnished to do so, subject to the following conditions://// The above copyright notice and this permission notice shall be included in all // copies or substantial portions of the Software.//// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS // IN THE SOFTWARE.//// Project: JumpShip Framework - Interfaces// File: IView.as// Created by: Jamie Scanlon//////////////////////////////////////////////////////////////////////////////////package com.jsjstudios.jumpship.interfaces{	////////////////////////////////////////////////////////////////////////////////	// Imports	////////////////////////////////////////////////////////////////////////////////		import flash.events.IEventDispatcher;		////////////////////////////////////////////////////////////////////////////////	//	// Class: IView	//	////////////////////////////////////////////////////////////////////////////////		/**	 * <code>IView</code> Interface extends IEventDispatcher. 	 * <p>	 * In the JumpShip framework, <code>IView</code> acts as a Mediator for Objects	 * registered to it. These Objects are registered through a call to <code>addAsset()</code>	 * and are later referenced through a call to <code>getAssetRef</code>. The	 * <code>IView</code> also can register one or more Models to listen to for updates.	 */	public interface IView extends IEventDispatcher	{				/**		 * Registers an asset to this View. After registered, the asset can be referenced by		 * calling <code>getAssetRef()</code> using the <code>assetName</code> 		 * 		 * @param assetName A <code>String</code> with a reference name for the asset.		 */		function addAsset ( assetName:String, assetRef:Object):void				/**		 * Retuns a reference to the asset given by the name provided by a previous call to		 * <code>addAsset()</code>.		 * 		 * @param assetName A string with the asset name for the asset to be returned.		 * @return A reference to the asset (if available) or null if not available.		 */		function getAssetRef(assetName:String):Object		/**		 * Registers a Model with this View. Multiple Models can be registered with multiple 		 * calls to this method. This View should implement behavior allowing it to be notified		 * of changes to the model.		 * 		 * @param theModel An <code>Object</code> reference to the Model instance.		 * @see public function unregisterModel(theModel:Object) 		 */		function registerModel(theModel:Object):void				/**		 * Unregisters a Model with this View.		 * 		 * @param theModel An <code>Object</code> reference to the Model instance.		 * @see public function registerModel(theModel:Object)  		 */		function unregisterModel(theModel:Object):void			}  // Class End	} // Package End