//////////////////////////////////////////////////////////////////////////////////// JumpShip Framework for AS3// Copyright 2008 Jamie Scanlon//// Permission is hereby granted, free of charge, to any person obtaining a copy // of this software and associated documentation files (the "Software"), to deal // in the Software without restriction, including without limitation the rights // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell // copies of the Software, and to permit persons to whom the Software is // furnished to do so, subject to the following conditions://// The above copyright notice and this permission notice shall be included in all // copies or substantial portions of the Software.//// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS // IN THE SOFTWARE.//// Project: JumpShip Framework - Core// File: JSDataRecord.as// Created by: Jamie Scanlon//////////////////////////////////////////////////////////////////////////////////package com.jsjstudios.jumpship.core{	////////////////////////////////////////////////////////////////////////////////	// Imports	////////////////////////////////////////////////////////////////////////////////		import com.jsjstudios.jumpship.core.events.*;		import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.IEventDispatcher;	import flash.utils.Proxy;	import flash.utils.flash_proxy;		////////////////////////////////////////////////////////////////////////////////	// Compiler Meta	////////////////////////////////////////////////////////////////////////////////	/**	*	@eventType com.jsjstudios.jumpship.core.events.DataRecordBindingEvent.UPDATE	*/	[Event(name="update", type="com.jsjstudios.jumpship.core.events.DataRecordBindingEvent")]		////////////////////////////////////////////////////////////////////////////////	//	//	// Class: JSDataRecord	//	//	////////////////////////////////////////////////////////////////////////////////		/**	* Data Record Class.	* Implements IEventDispatcher	*/	public dynamic class JSDataRecord extends Proxy implements IEventDispatcher	{		// 		// Private Variables		//		/**		 *	@private		 */		private var dataRecord:Object;		/**		 *	@private		 */		private var eventDispatcher:EventDispatcher;			////////////////////////////////////////////////////////////////////////////		//		// Constructor		//		////////////////////////////////////////////////////////////////////////////		/**		 *	Constructor.		 */		public function JSDataRecord ( )		{						dataRecord = new Object();						eventDispatcher = new EventDispatcher();					}				////////////////////////////////////////////////////////////////////////////		//		// Public Methods		//		////////////////////////////////////////////////////////////////////////////				/**		 * Create this record item with the name-value pairs specified.		 * @param theAttributes The name-value pairs for the record item. Takes the form 		 * {name1:value1, name2:value2, ... }		 */		public function create(theAttributes:Object):void {						for (var a:Object in theAttributes) {								this[a] = theAttributes[a];							}					}			/**		 * Updates this record item with the name-value pairs specified.		 * @param theAttributes The name-value pairs for the record item. Takes the form 		 * {name1:value1, name2:value2, ... }		 */		public function update(theAttributes:Object):void {						for (var a:Object in theAttributes) {								if (dataRecord[a] != undefined) {									this[a] = theAttributes[a];									}							}					}				/**		 * Adds an attribute to this record.		 * @param theName The name of the new attribute 		 * @param theValue The value of the new attribute		 */		public function addAttribute(theName:String, theValue:Object = null):void {							this[theName] = theValue;					}				/**		 * Removes an attribute from this record.		 * @param theName The name of the attribute to be removed		 */		public function removeAttribute(theName:String):void {			dataRecord[theName] = null;		}				/**		 * Removes all attributes from this record.		 */		public function destroy():void {						for (var a:String in dataRecord) {								removeAttribute(a);							}						dataRecord = {};					}				/**		 * Returns the contents of this record in XML form.		 * @return an XML object containing the contents of the record.		 */		public function toXML():XML {						var returnXML:XML = <record></record>;			XML.ignoreWhitespace = true;						for ( var a:String in dataRecord ) {								if (String(dataRecord[a]) != "[object Object]" && String(dataRecord[a]) != "undefined" && String(dataRecord[a]) != "null") { 									var myElement:XML = <{a}>{dataRecord[a]}</{a}>;					myElement.@type = typeof(dataRecord[a]);										returnXML.appendChild(myElement);									}							}						return returnXML;					}				/**		 * Returns the string representation of this object.		 * @return "[object JSDataRecord]"		 */		public function toString():String {						return "[object JSDataRecord]";					}				/**		 * Returns an Object representation of this object. This method differs from the redord property in that		 * it creates a new copy of the internal data rather than returning a reference.		 * @return Returns an Object representation of this object		 */		public function toObject():Object {						var tempObj:Object = new Object();						for (var a:* in dataRecord) {				tempObj[a] = dataRecord[a]			}						return tempObj;					}				////////////////////////////////////////////////////////////////////////////		//		// IEventDispatcher Methods		//		////////////////////////////////////////////////////////////////////////////				/**		 *	addEventListener implementation.		 *	@param type		 *	@param listener		 *	@param useCapture		 *	@param priority		 *	@param useWeakReference		 * 	@see 	flash.events.IEventDispatcher		 */		public function addEventListener(type:String, listener:Function, useCapture:Boolean = false, priority:int = 0, useWeakReference:Boolean = false):void		{						eventDispatcher.addEventListener(type, listener, useCapture, priority, useWeakReference)					}				/**		 *	dispatchEvent implementation.		 *	@param event		 *	@see 	flash.events.IEventDispatcher		 */		public function dispatchEvent(event:Event):Boolean		{						return eventDispatcher.dispatchEvent(event);					}				/**		 *	hasEventListener implementation.		 *	@param type		 * 	@see 	flash.events.IEventDispatcher		 */		public function hasEventListener(type:String):Boolean		{						return eventDispatcher.hasEventListener(type);					}				/**		 *	removeEventListener implementation.		 *	@param type		 *	@param listener		 *	@param useCapture		 * @see 	flash.events.IEventDispatcher		 */		public function removeEventListener(type:String, listener:Function, useCapture:Boolean = false):void		{						eventDispatcher.removeEventListener(type, listener, useCapture)					}				/**		 *	willTrigger implementation.		 *	@param type		 * @see 	flash.events.IEventDispatcher		 */		public function willTrigger(type:String):Boolean		{						return eventDispatcher.willTrigger(type);					}				////////////////////////////////////////////////////////////////////////////		//		// Hook Methods		//		////////////////////////////////////////////////////////////////////////////				/**		 *	A function that will get called every time a property is set. This function		 *	is used for data binding.		 *	@param theName The name of the property being set		 */		public function setFunction(theName:String):void {this.dispatchEvent(new DataRecordBindingEvent(DataRecordBindingEvent.UPDATE, this, theName))}				/**		 *	A function that will get called every time a property is retrieved.		 *	@param theName The name of the property being retrieved		 */		public function getFunction(theName:String):* {}				////////////////////////////////////////////////////////////////////////////		//		// Event Handlers		//		////////////////////////////////////////////////////////////////////////////				/**		 *	A handler for a data binding event thrown by an attribute if that attribute is.		 *	another JSDataRecord instance. This function issues a new DataRecordBindingEvent.		 *	@param event		 */		protected function handleChildDataBindingEvent(event:DataRecordBindingEvent):void {			this.dispatchEvent(new DataRecordBindingEvent(DataRecordBindingEvent.UPDATE, event.record, event.attribute))		}			////////////////////////////////////////////////////////////////////////////		//		// Proxy Functions		//		////////////////////////////////////////////////////////////////////////////				/**		 *	@inheritDoc		 */		override flash_proxy function nextNameIndex(index:int):int {						var myLength:uint = 0;						for (var a:Object in dataRecord) {								myLength++;							}						if (index < myLength) {								return index + 1;							} else {								return 0;							}				}				/**		 *	@inheritDoc		 */		override flash_proxy function nextName(index:int):String {						var myDictionary:Array = [];						for (var a:Object in dataRecord) {								myDictionary.push(a);							}						return myDictionary[index-1];					}				/**		 *	@inheritDoc		 */		override flash_proxy function nextValue(index:int):* {						var myDictionary:Array = [];						for (var a:Object in dataRecord) {								myDictionary.push(a);							}						return dataRecord[myDictionary[index-1]];					}				/**		 *	@inheritDoc		 */		override flash_proxy function callProperty(methodName:*, ... args):* {	        var res:*;	        res = this[methodName].apply(this, args);	        return res;	    }				////////////////////////////////////////////////////////////////////////////		//		// Getter/Setters		//		////////////////////////////////////////////////////////////////////////////				/**		 *	@inheritDoc		 */		override flash_proxy function getProperty(name:*):* {						getFunction(name);							return dataRecord[name];						}				/**		 *	@inheritDoc		 */		override flash_proxy function setProperty(name:*, value:*):void {			// If the new attribute is itself a JSDataRecord, add a data binding event listener			if ( dataRecord[name] == null && (value as JSDataRecord) != null ) {				(value as JSDataRecord).addEventListener( DataRecordBindingEvent.UPDATE, handleChildDataBindingEvent, false, -50, true );			}						dataRecord[name] = value;						setFunction(name);						}			/**		 * (Read Only) Reference to the actual data object for this record item. This is 		 * not the preferred way to access the data but can be used to access		 * the data without triggering the getter/setter hook functions.		 */		public function get record():Object {					return dataRecord;					}					}	// Class End			} // Package End