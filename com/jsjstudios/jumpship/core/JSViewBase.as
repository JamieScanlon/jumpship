//////////////////////////////////////////////////////////////////////////////////// JumpShip Framework for AS3// Copyright 2008 Jamie Scanlon//// Permission is hereby granted, free of charge, to any person obtaining a copy // of this software and associated documentation files (the "Software"), to deal // in the Software without restriction, including without limitation the rights // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell // copies of the Software, and to permit persons to whom the Software is // furnished to do so, subject to the following conditions://// The above copyright notice and this permission notice shall be included in all // copies or substantial portions of the Software.//// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS // IN THE SOFTWARE.//// Project: JumpShip Framework - Core// File: JSViewBase.as// Created by: Jamie Scanlon//////////////////////////////////////////////////////////////////////////////////package com.jsjstudios.jumpship.core{	////////////////////////////////////////////////////////////////////////////////	// Imports	////////////////////////////////////////////////////////////////////////////////		import com.jsjstudios.jumpship.core.events.DataChangeEvent;	import com.jsjstudios.jumpship.core.JSRuntimeEnvironment;	import com.jsjstudios.jumpship.interfaces.IView;		import flash.display.Sprite;		////////////////////////////////////////////////////////////////////////////////	// Compiler Meta	////////////////////////////////////////////////////////////////////////////////	/**	* @eventType com.jsjstudios.jumpship.core.events.DataChangeEvent.DATA_CHANGE	*/	[Event(name="dataChange", type="com.jsjstudios.jumpship.core.events.DataChangeEvent")]		////////////////////////////////////////////////////////////////////////////////	//	// Class: JSViewBase	//	////////////////////////////////////////////////////////////////////////////////		/**	 * View Base Class extends <code>Sprite</code> implements <code>IView</code>.	 */	public class JSViewBase extends Sprite implements IView	{		//		// Assets		//		/**		 *	An array of models that are bound to this view			 */		protected var models:Array;				/**		 *	An array of assets this view manages		 */		protected var assets:Array;				/**		 *	An array of load status' for the assests in this view		 */		protected var assetStatus:Array;				////////////////////////////////////////////////////////////////////////////////		//		// Constructor		//		////////////////////////////////////////////////////////////////////////////////				/**		 * Constructor.			 */		public function JSViewBase ()		{							super();						// Initialize Properties			models = new Array();			assets = new Array();			assetStatus = new Array();						// Hook Functions			preAssetInit();			addAssets();			init();					}				////////////////////////////////////////////////////////////////////////////////		//		// Public Methods		//		////////////////////////////////////////////////////////////////////////////////				/**		 * Registers an asset to this View. After registered, the asset can be referenced by		 * calling <code>getAssetRef()</code> using the <code>assetName</code> 		 * 		 * @param assetName A <code>String</code> with a reference name for the asset.		 * @throws Error if the assetName has already been assigned to an asset.		 */		final public function addAsset ( assetName:String, assetRef:Object):void		{						if ( assets [ assetName ] != undefined ) {				trace ("ERROR The asset "+assetName+" has already been added to the View.");			} else {					// Save the Reference to this Asset in an array				assets [ assetName ] = assetRef;								// Also save the status of this asset. The starting status				// for any new asset is "unavailable" meaning this asset				// is not loaded and/or not initialized.				// The View should load it's assets and set the status to "available"				assetStatus [ assetName ] = "unavailable";			}					}				/**		 * The <code>JSViewBase</code> provides means to control loading and initilization		 * of it's assets. The <code>load()</code> method tells an asset to load. The		 * asset to be loaded is given by the <code>assetName</code> parameter. If no parameter		 * is given, all assets associated with this View. This method calls the 		 * <code>loadAsset()</code> primative to carry out the task of loading.		 * 		 * @param assetName An optional string with the asset name to be loaded.		 */		final public function load(assetName:String = null):void		{						//			// Concrete method for telling this View to load it's assets.			// If a name is given, only that asset is loaded, otherwise			// all assets belonging to this view will be loaded.			//						if (assetName != null) {								loadAsset(assetName);							} else {								for (var a:* in assets) {										loadAsset(a);									}							}					}				/**		 * Retuns a reference to the asset given by the name provided by a previous call to		 * <code>addAsset()</code>.		 * 		 * @param assetName A string with the asset name for the asset to be returned.		 * @return A reference to the asset (if available) or null if not available.		 */		final public function getAssetRef(assetName:String):Object		{						//			// Concrete method for returning a reference to any particular asset.			// Only assets which have an "available" status will be returned.			// If unavailable, null is returned.			//						if ( assets [ assetName ] == undefined ) {								if (JSRuntimeEnvironment.getInstance().environment == "development") {										throw new Error ("ERROR The asset "+assetName+" has not been added to the View and cannot return a reference.");									}							} else {								if ( assetStatus [ assetName ] == "available") {										return assets [ assetName ];									} else {										// The asset is unavailable. Send a warning but don't throw an error.					trace("ATViewTemplate - There has been an attempt to get a reference to the asset "+assetName+" before this asset is available. null has been returned");									}							}						return null;					}				/**		 * The <code>JSViewBase</code> provides means to tell whether an asset is available to be accessed.		 * This prevents an unloaded or uninitialized asset from being referenced by another part of the		 * application. Calling this method with the asset name will make that asset available.		 * 		 * @param assetName A string with the asset name for the asset to be returned.		 * @throws Error if the asset name has not been registered.		 * @see public function makeUnavailable ( assetName:String ) 		 */		final public function makeAvailable ( assetName:String ):void		{						if ( assets [ assetName ] == undefined ) {				trace ("ERROR The asset "+assetName+" has not been added to the View and cannot be made available.");			} else {				// Also save the status of this asset.				assetStatus [ assetName ] = "available";			}					}				/**		 * The <code>JSViewBase</code> provides means to tell whether an asset is available to be accessed.		 * This prevents an unloaded or uninitialized asset from being referenced by another part of the		 * application. Calling this method with the asset name will make that asset unavailable.		 * 		 * @param assetName A string with the asset name for the asset to be returned.		 * @throws Error if the asset name has not been registered.		 * @see public function makeAvailable ( assetName:String )		 */		final public function makeUnavailable ( assetName:String ):void		{						if ( assets [ assetName ] == undefined ) {				trace ("ERROR The asset "+assetName+" has not been added to the View and cannot be made unavailable.");			} else {				// Also save the status of this asset.				assetStatus [ assetName ] = "unavailable";			}					}				/**		 * Registers a Model with this View. Multiple Models can be registered with multiple 		 * calls to this method. This View should implement behavior allowing it to be notified		 * of changes to the model.		 * 		 * @param theModel An <code>Object</code> reference to the Model instance.		 * @see public function unregisterModel(theModel:Object) 		 */		public function registerModel(theModel:Object):void		{						models.push({model:theModel, eventHandler:dataChangeHandler, updateFunction:update, preUpdateFunction:preUpdate})			theModel.addEventListener(DataChangeEvent.DATA_CHANGE, dataChangeHandler );			theModel.addEventListener(DataChangeEvent.PRE_DATA_CHANGE, dataChangeHandler );					}				/**		 * Unregisters a Model with this View.		 * 		 * @param theModel An <code>Object</code> reference to the Model instance.		 * @see public function registerModel(theModel:Object)  		 */		public function unregisterModel(theModel:Object):void		{						for (var i:int = 0; i < models.length; i++) {								if (models[i].model == theModel) {										models[i].removeEventListener(DataChangeEvent.DATA_CHANGE, models[models.length-1].eventHandler);					models[i].removeEventListener(DataChangeEvent.PRE_DATA_CHANGE, models[models.length-1].eventHandler);					models.splice(i,1);									}							}					}				////////////////////////////////////////////////////////////////////////////////		//		// Hook Functions		//		////////////////////////////////////////////////////////////////////////////////				/**		 *	A method that is called before any assets have been added		 */		protected function preAssetInit():void{}				/**		 *	A method that is called after any assets have been added.		 *	This method should be overriden to perform basic class initialization.		 */		protected function init():void{}				/**		 *	A method that is called as a response to a <code>DataChangeEvent.PRE_DATA_CHANGE</code>		 *	event issued by any models bound to this view		 *	@param theModel The JSDataModel instance issuing the event		 */		protected function preUpdate(theModel:JSDataModel):void{}				/**		 *	A method that is called as a response to a <code>DataChangeEvent.DATA_CHANGE</code>		 *	event issued by any models bound to this view		 *	@param theModel The JSDataModel instance issuing the event		 */		protected function update(theModel:JSDataModel):void{}				/**		 *	A method that is called to add assets that this View. 		 *	The format for adding a Command should be as follows:		 *	<p>		 *	<code>addAsset( "myMC", myMC );</code>		 *	<p>		 */		protected function addAssets ():void		{			//			// Note: View assets are added as references to DisplayObjects. 			// The View may either make reference to a DisplayObject already on stage			// or create one dynamically.			//			// The general format should be:			//			// addAsset( "myMC", myMC );			//			// If there is no external load controller, this class should call the			// load() concrete method after all assets have been added it initialize			// them and make their status "available". The value of an external load			// controller is that the assets can be told to load in a way that effects			// the general site's load time the least			//					}				////////////////////////////////////////////////////////////////////////////		//		// Primitive Functions		//		////////////////////////////////////////////////////////////////////////////				/**		 *	A method that is called to load an asset and make it available for		 *	interaction. This method can be overriden to perform any loading		 *	operations required.		 */		protected function loadAsset(assetName:String):void		{						//			// Note: This function should be used to load and/or initialize an asset.			// This function is called by the load(assetName:String) concrete method.			// After the asset is loaded, the makeAvalable() concrete function should			// be called (either by this class or by a listening class) so that this			// asset's status can be updated.			//						makeAvailable(assetName);					}				////////////////////////////////////////////////////////////////////////////////		//		// Event Handlers		//		////////////////////////////////////////////////////////////////////////////////				/**		 *	A DataChangeEvent handler that is trown by one of the JSViewBase's		 *	registered models. This handler calls <code>update();</code> or		 *	<code>preUpdate();</code> based on the DataChangeEvent's type.		 */		protected function dataChangeHandler( event:DataChangeEvent ):void {						var theModel:JSDataModel;						for (var i:int = 0; i < this.models.length; i++ ) {				if ( JSDataModel (models[i].model).incl(event.items[0]) ) {					theModel = models[i].model				}			}						if (event.type == DataChangeEvent.DATA_CHANGE) {								this.update(theModel);								}							if (event.type == DataChangeEvent.PRE_DATA_CHANGE) {								this.preUpdate(theModel);							}						dispatchEvent( event );						}			}  // Class End	} // Package End