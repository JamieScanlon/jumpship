//////////////////////////////////////////////////////////////////////////////////// JumpShip Framework for AS3// Copyright 2007 Jamie Scanlon//// Permission is hereby granted, free of charge, to any person obtaining a copy // of this software and associated documentation files (the "Software"), to deal // in the Software without restriction, including without limitation the rights // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell // copies of the Software, and to permit persons to whom the Software is // furnished to do so, subject to the following conditions://// The above copyright notice and this permission notice shall be included in all // copies or substantial portions of the Software.//// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS // IN THE SOFTWARE.//// Project: JumpShip Framework - Core// File: JSArrayEnumerable.as// Created by: Jamie Scanlon//////////////////////////////////////////////////////////////////////////////////// This class provides utility functions for enumerable objects making it easy// to traverse data structures in a Ruby-esque manner. Much of the code was// adapted from the Enumberable object in the Prototype library for JavaScript.//// This class also lets you use [ ] array notation to access the data. // Much of the code for these functions were derived from the Collection data// structure that is used throuout the Flex Framework. The goal here is to// provide a basis for a data structure that is grounded in the standard// prncipals of Ruby / Prototype but also is mindful of the future direction// and common practices of Flash / Flex//// In order to be as flexible as possible, this class also implements// IEventDispatcher.package com.jsjstudios.jumpship.core{		////////////////////////////////////////////////////////////////////////////////	//	//	// Class: JSArrayEnumerable	//	//	////////////////////////////////////////////////////////////////////////////////	/**	* Static Enumerable Class for Arrays. This class modifies the prototype for 	*	Array objects to give them enumerable methods.	*/	public class JSArrayEnumerable	{				private static var _instance:JSArrayEnumerable;				////////////////////////////////////////////////////////////////////////////		//		// Constructor		//		////////////////////////////////////////////////////////////////////////////				/**		* Constructor.		*/		public function JSArrayEnumerable ( )		{					Array.prototype.each = function (iterator:Function):* {								for ( var i:int = 0; i < this.length; i++ ) {					iterator(this[i], i);				}								return this;							}						Array.prototype.eachSlice = function (num:uint, iterator:Function):* {							var index:uint = -num;				var slices:Array = [];				var array:Array = this.toArray();								while ((index += num) < array.length) {					slices.push(array.slice(index, index+num));				}								return slices.map(iterator);							}						Array.prototype.getItemAt = function (index:int, ... args):* {								var myResult:Array = this.findAll(function (value:*, myIndex:int):* {					return myIndex == index;				});								if (myResult.length > 0) {										return myResult[0];									} else {										return null;									}								}									Array.prototype.setItemAt = function (value:Object, index:int, ... args):* {				this[index] = value;			}						Array.prototype.all = function (iterator:Function):* {								var result:Boolean = true;								this.each(function (value:*,index:int):* {					result = result && iterator(value,index);				});								return result;							}						Array.prototype.any = function (iterator:Function):* {								var result:Boolean = false;								this.each(function (value:*,index:int):* {					if (!result) {						result = iterator(value,index);					}				});								return result;							}						Array.prototype.collect = function ( iterator:Function = null ):* {								if (iterator == null) {					iterator = function (value:*, ... args):* {						return value;					};				}								var results:Array = [];								this.each(function (value:*,index:int):* {					results.push( iterator(value,index) );				});								return results;							}						Array.prototype.detect = function (iterator:Function):* {								var result:* = false;								this.each(function (value:*,index:int):* {					if ( iterator(value,index) && !result ) {						result = value;					}				});								return result;							}						Array.prototype.findAll = function (iterator:Function):* {								var results:Array = [];								this.each(function (value:*,index:int):* {					if ( iterator(value,index) ) {						results.push( value );					}				});								return results;							}						// Alias Function. Same as findAll()			Array.prototype.select = function (iterator:Function):* {								var results:Array = [];								this.each(function (value:*,index:int):* {					if ( iterator(value,index) ) {						results.push( value );					}				});								return results;							}						Array.prototype.grep = function (pattern:RegExp, iterator:Function):* {								var results:Array = [];								this.each(function (value:*,index:int):* {					var stringValue:String = value.toString();					if ( pattern.test(stringValue) ) {						results.push( iterator(value,index) );					}				});								return results;							}						Array.prototype.incl = function (object:*):* {								var found:Boolean = false;								this.each(function (value:*):* {					if ( value == object ) {						found = true;					}				});								return found;							}						// Alias Function. Same as incl()			Array.prototype.member = function (object:*):* {								var found:Boolean = false;								this.each(function (value:*):* {					if ( value == object ) {						found = true;					}				});								return found;							}				Array.prototype.inject = function (memo:*, iterator:Function):* {								this.each(function(value:*, index:int):* {					memo = iterator(memo, value, index);				});								return memo;							}				Array.prototype.invoke = function (method:*, ... args):* {								return this.map(function(value:*):* {   					return value[method].apply(value, args);				});							}						Array.prototype.max = function (iterator:Function):* {								var result:*;								this.each(function (value:*, index:int):* {					value = iterator(value, index);					if (result == null || value >= result) {						result = value					}				});								return result;							}						Array.prototype.min = function (iterator:Function):* {								var result:*;								this.each(function (value:*, index:int):* {					value = iterator(value, index);					if (result == null || value < result) {						result = value					}				});								return result;							}						Array.prototype.pluck = function (property:String):* {								var results:Array = [];								this.each(function(value:*, index:int):* {					results.push(value[property]);				});								return results;							}						Array.prototype.reject = function (iterator:Function):* {								var results:Array = [];								this.each(function (value:*, index:int):* {					if (!iterator(value, index)) {						results.push(value);					}				});								return results;							}						Array.prototype.sortBy = function (iterator:Function):* {								var results:Array = [];								var temp:Array =  this.map(function(value:*, index:int):* {					return {value: value, criteria: iterator(value, index)};				}).sort(function(left:*, right:*):* {					var a:* = left.criteria;					var b:* = right.criteria;					return a < b ? -1 : a > b ? 1 : 0;				});								for (var i:int = 0; i < temp.length; i++) {					results.push(temp[i].value);				}					 				return results;							}						Array.prototype.toArray = function ():Array {					return this;				}						// Alias Function. Same as toArray()			Array.prototype.entries =function ():Array {					return this;				}						Array.prototype.zip = function (... args):* {				//			}						Array.prototype.size = function ():int {								return this.toArray().length;							}		}				/**		* Static write-only property to enable this class and modify the		*	Array object prototype.		*/		public static function set enable(theFlag:Boolean):void {			if (_instance == null && theFlag) {				_instance = new JSArrayEnumerable();			}		}						}	// Class End	} // Package End