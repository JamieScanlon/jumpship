//////////////////////////////////////////////////////////////////////////////////// JumpShip Framework for AS3// Copyright 2008 Jamie Scanlon//// Permission is hereby granted, free of charge, to any person obtaining a copy // of this software and associated documentation files (the "Software"), to deal // in the Software without restriction, including without limitation the rights // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell // copies of the Software, and to permit persons to whom the Software is // furnished to do so, subject to the following conditions://// The above copyright notice and this permission notice shall be included in all // copies or substantial portions of the Software.//// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS // IN THE SOFTWARE.//// Project: JumpShip Framework - Interfaces// File: ICommand.as// Created by: Jamie Scanlon//////////////////////////////////////////////////////////////////////////////////package com.jsjstudios.jumpship.interfaces{	////////////////////////////////////////////////////////////////////////////////	// Imports	////////////////////////////////////////////////////////////////////////////////		//	////////////////////////////////////////////////////////////////////////////////	//	//	// Interface: ICommand	//	//	////////////////////////////////////////////////////////////////////////////////	/**	 * <code>ICommand</code> Interface. 	 * <p>	 * In the JumpShip framework, <code>ICommand</code> has two	 * responsibilities, execute an operation and return a result. <code>ICommand</code>'s	 * are assumed to be asynchanous and to have a result that gets returned to a function	 * given in the <code>execute()</code> method. Each <code>ICommand</code> instance	 * may be given a unique id to be passed back to the return function. Each 	 * <code>ICommand</code> instance may also get an <code>Object</code> containing values	 * it may need to perform it's operation.	 */	public interface ICommand	{				/**		 * Execute the <code>ICommand</code>.		 * 		 * @param params an optional <code>Object</code> parameter that can contain information this command needs to do it's job.		 * @param returnFunc an optional <code>Function</code> parameter that will be called to handle the result.		 * @param token an optional <code>Object</code> passed back through the argument of the <code>returnFunc</code>.		 */		function execute ( params:Object = null, returnFunc:Function = null, token:Object = null ):void				/**		 * Process the <code>ICommand</code> result.		 * <p>		 * It is anticipated that <code>ICommand</code>'s are asynchronous, in which case this is the		 * event handler for a result. The implementation of this handler should call the <code>returnFunc</code>		 * given in the <code>execue()</code> method, passing the <code>resultObj</code> and the <code>id</code>		 * (also given in the <code>execute()</code> method) as arguments in the form:</p>		 * <p>		 * <code>returnFunc(resultObj);</code>		 * </p>		 * <p>		 * THIS SHOULD BE THE LAST FUNCTION CALLED BY ANY COMMAND. Even if this Command does not call a service asynchronously.		 * 		 * @param resultObj an optional <code>Object</code> containing the result parameters.		 */		function onResult ( resultObj:Object = null ):void			} // Class End	} // Package End