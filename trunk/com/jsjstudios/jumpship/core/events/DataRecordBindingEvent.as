//////////////////////////////////////////////////////////////////////////////////// JumpShip Framework for AS3// Copyright 2007 Jamie Scanlon//// Permission is hereby granted, free of charge, to any person obtaining a copy // of this software and associated documentation files (the "Software"), to deal // in the Software without restriction, including without limitation the rights // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell // copies of the Software, and to permit persons to whom the Software is // furnished to do so, subject to the following conditions://// The above copyright notice and this permission notice shall be included in all // copies or substantial portions of the Software.//// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS // IN THE SOFTWARE.//// Project: JumpShip Framework - Core// File: JSDataRecord.as// Created by: Jamie Scanlon//////////////////////////////////////////////////////////////////////////////////package com.jsjstudios.jumpship.core.events{		////////////////////////////////////////////////////////////////////////////////	// Imports	////////////////////////////////////////////////////////////////////////////////		import flash.events.Event	import com.jsjstudios.jumpship.core.JSDataRecord;		////////////////////////////////////////////////////////////////////////////////	//	//	// Class: JSDataRecord	//	//	////////////////////////////////////////////////////////////////////////////////		/**	 * The DataChangeEvent class defines the event that is dispatched when the data 	 * that is associated with a JSDataRecord object changes.	 *	 */	public class DataRecordBindingEvent extends Event	{				/**         * Defines the value of the <code>type</code> property of a <code>update</code>		 * event object. 		 *		 * <p>This event has the following properties:</p>		 *  <table class="innertable" width="100%">		 *     <tr><th>Property</th><th>Value</th></tr>		 * 	   <tr><td><code>bubbles</code></td><td><code>false</code></td></tr>		 *     <tr><td><code>cancelable</code></td><td><code>false</code>; there is no default behavior to cancel.</td></tr>		 *     <tr><td><code>type</code></td><td>Identifies the type of change that was made.</td></tr>		 *	   <tr><td><code>currentTarget</code></td><td>The object that is actively processing 		 * 			the event object with an event listener.</td></tr>		 *     <tr><td><code>theRecord</code></td><td>Identifies the record that changed.</td></tr>		 *     <tr><td><code>theAttribute</code></td><td>Identifies the attribute of the record that changed.</td></tr>    	 *     <tr><td><code>target</code></td><td>The object that dispatched the event. The target is          *           not always the object listening for the event. Use the <code>currentTarget</code>		 * 			property to access the object that is listening for the event.</td></tr>		 *  </table>         *         * @eventType update         *		 */		public static const UPDATE:String = "update";				/**		 * The attribute of the record that changed		 */		public var attribute:String;				/**		 * The record that changed		 */		public var record:*;				public function DataRecordBindingEvent(theType:String = UPDATE, theRecord:JSDataRecord = null, theAttribute:String = null) 		{						super(theType);			this.attribute = theAttribute;			this.record = theRecord;					}				/**		 * Creates a copy of the DataRecordBindingEvent object and sets the value of each parameter to match		 * that of the original.		 *		 * @return A new DataRecordBindingEvent object with property values that match those of the         *         original.		 */		public override function clone():Event 		{						return new DataRecordBindingEvent(type, record, attribute);					}				/**		 * Returns a string that contains all the properties of the DataRecordBindingEvent object. The		 * string is in the following format:		 * 		 * <p>[<code>DataRecordBindingEvent type=<em>value</em> bubbles=<em>value</em>		 *  cancelable=<em>value</em> eventPhase=<em>value</em>		 *   attribute=<em>value</em> record=<em>value</em></code>]</p>		 *         * @return A string that contains all the properties of the DataRecordBindingEvent object.		 */		public override function toString():String		{						return formatToString("DataRecordBindingEvent", "type", "bubbles", "cancelable", "eventPhase", "attribute", "record");					}			} // Class End		} // Package End